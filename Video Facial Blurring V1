{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOLsCOls2Bcx2C7X3cF+QLa",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/thegregbeyond/FreeFuse-AI-Calbright-Project/blob/main/Video%20Facial%20Blurring%20V1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1) Extract Video Stills"
      ],
      "metadata": {
        "id": "5FmghcqzHyY7"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 616
        },
        "id": "l8it6gaWVGPL",
        "outputId": "0affea37-7108-4229-9e8c-11d021dde5ea"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounting Google Drive...\n",
            "Mounted at /content/drive\n",
            "Drive mounted.\n",
            "Found 18 videos in /content/drive/MyDrive/FreeFuse_Project/Source_Videos/Alloy Personal Training\n",
            "\n",
            "[1/18] Processing 'Path 3 Focus on Weight Loss and Wellness.mp4'\n",
            "  → Skipped first 1s (30 frames)\n",
            "  ✔ Saved frame 'Path 3 Focus on Weight Loss and Wellness_0001.jpg'\n",
            "  ✔ Saved frame 'Path 3 Focus on Weight Loss and Wellness_0005.jpg'\n",
            "  ✔ Saved frame 'Path 3 Focus on Weight Loss and Wellness_0009.jpg'\n",
            "  Completed 'Path 3 Focus on Weight Loss and Wellness.mp4', saved 3 frames.\n",
            "\n",
            "[2/18] Processing 'Path 2 Choice 2 Specialized Group Training Session.mp4'\n",
            "  → Skipped first 1s (30 frames)\n",
            "  ✔ Saved frame 'Path 2 Choice 2 Specialized Group Training Session_0001.jpg'\n",
            "  ✔ Saved frame 'Path 2 Choice 2 Specialized Group Training Session_0005.jpg'\n",
            "  ✔ Saved frame 'Path 2 Choice 2 Specialized Group Training Session_0009.jpg'\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-1-2425540443.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     72\u001b[0m \u001b[0;31m# === Main Execution ===\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m \u001b[0mmount_drive\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 74\u001b[0;31m \u001b[0mextract_stills\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mINPUT_DIR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mOUTPUT_DIR\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mCAPTURE_INTERVAL_S\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mSTART_TIME_S\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/tmp/ipython-input-1-2425540443.py\u001b[0m in \u001b[0;36mextract_stills\u001b[0;34m(input_dir, output_dir, interval_s, start_s)\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0msaved_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m         \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m             \u001b[0mret\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mframe\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcap\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mret\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "# Extract Video Stills\n",
        "\n",
        "# === Import Libraries ===\n",
        "\n",
        "from pathlib import Path\n",
        "import cv2\n",
        "from google.colab import drive\n",
        "\n",
        "# === Configuration ===\n",
        "INPUT_DIR = Path('/content/drive/MyDrive/FreeFuse_Project/Source_Videos/Alloy Personal Training')\n",
        "OUTPUT_DIR = Path('/content/drive/MyDrive/FreeFuse_Project/Extracted_Stills')\n",
        "CAPTURE_INTERVAL_S = 4      # seconds between captures\n",
        "START_TIME_S = 1            # skip first N seconds of each video\n",
        "VIDEO_EXTS = {'.mp4', '.mov', '.avi'}\n",
        "\n",
        "# === Functions ===\n",
        "def mount_drive():\n",
        "    \"\"\"Mount Google Drive to /content/drive\"\"\"\n",
        "    print(\"Mounting Google Drive...\")\n",
        "    drive.mount('/content/drive', force_remount=True)\n",
        "    print(\"Drive mounted.\")\n",
        "\n",
        "def extract_stills(input_dir: Path, output_dir: Path, interval_s: float, start_s: float):\n",
        "    \"\"\"\n",
        "    Extract still frames from all videos in input_dir at every interval_s seconds,\n",
        "    starting after start_s seconds, saving to output_dir.\n",
        "    \"\"\"\n",
        "    output_dir.mkdir(parents=True, exist_ok=True)\n",
        "    video_files = [f for f in input_dir.iterdir() if f.suffix.lower() in VIDEO_EXTS]\n",
        "\n",
        "    if not video_files:\n",
        "        print(f\"No videos found in {input_dir}\")\n",
        "        return\n",
        "\n",
        "    print(f\"Found {len(video_files)} videos in {input_dir}\\n\")\n",
        "    for idx, video_file in enumerate(video_files, start=1):\n",
        "        print(f\"[{idx}/{len(video_files)}] Processing '{video_file.name}'\")\n",
        "        cap = cv2.VideoCapture(str(video_file))\n",
        "        if not cap.isOpened():\n",
        "            print(f\"  ✗ Could not open {video_file.name}, skipping.\")\n",
        "            continue\n",
        "\n",
        "        fps = cap.get(cv2.CAP_PROP_FPS) or 30.0\n",
        "        start_frame = int(start_s * fps)\n",
        "        if start_frame > 0:\n",
        "            cap.set(cv2.CAP_PROP_POS_FRAMES, start_frame)\n",
        "            print(f\"  → Skipped first {start_s}s ({start_frame} frames)\")\n",
        "\n",
        "        next_capture = start_s\n",
        "        saved_count = 0\n",
        "        while True:\n",
        "            ret, frame = cap.read()\n",
        "            if not ret:\n",
        "                break\n",
        "            current_s = cap.get(cv2.CAP_PROP_POS_MSEC) / 1000.0\n",
        "            if current_s >= next_capture:\n",
        "                mm = int(current_s // 60)\n",
        "                ss = int(current_s % 60)\n",
        "                timestamp = f\"{mm:02d}{ss:02d}\"\n",
        "                out_name = f\"{video_file.stem}_{timestamp}.jpg\"\n",
        "                out_path = output_dir / out_name\n",
        "                cv2.imwrite(str(out_path), frame)\n",
        "                print(f\"  ✔ Saved frame '{out_name}'\")\n",
        "                saved_count += 1\n",
        "                next_capture += interval_s\n",
        "\n",
        "        cap.release()\n",
        "        print(f\"  Completed '{video_file.name}', saved {saved_count} frames.\\n\")\n",
        "\n",
        "    print(\"All videos processed.\")\n",
        "\n",
        "# === Main Execution ===\n",
        "mount_drive()\n",
        "extract_stills(INPUT_DIR, OUTPUT_DIR, CAPTURE_INTERVAL_S, START_TIME_S)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2) Object Detection"
      ],
      "metadata": {
        "id": "a_9DCsIuJdxm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2a) DETR ResNet v50"
      ],
      "metadata": {
        "id": "pp5I5I5aJkEV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from pathlib import Path\n",
        "import torch\n",
        "import pandas as pd\n",
        "from PIL import Image\n",
        "import os\n",
        "from transformers import AutoImageProcessor, AutoModelForObjectDetection\n",
        "from google.colab import drive\n",
        "\n",
        "# === Configuration ===\n",
        "STILLS_DIR = Path('/content/drive/MyDrive/FreeFuse_Project/Extracted_Stills')\n",
        "OUTPUT_CSV = STILLS_DIR / 'draft_annotations.csv'\n",
        "MODEL_NAME = \"facebook/detr-resnet-50\"\n",
        "MAX_OBJS = 8\n",
        "CONF_THRESH = 0.9\n",
        "\n",
        "# === Helper Functions ===\n",
        "def mount_drive():\n",
        "    \"\"\"Mount Google Drive.\"\"\"\n",
        "    print(\"Mounting Google Drive...\")\n",
        "    drive.mount('/content/drive', force_remount=True)\n",
        "    print(\"Drive mounted.\")\n",
        "\n",
        "def parse_filename(fn: str):\n",
        "    \"\"\"\n",
        "    From image filename of form \"<video_id>_<MMSS>.jpg\", extract:\n",
        "      - video_id (str)\n",
        "      - timestamp_sec (int)\n",
        "    \"\"\"\n",
        "    stem = Path(fn).stem\n",
        "    parts = stem.rsplit('_', 1)\n",
        "    if len(parts) != 2 or not parts[1].isdigit():\n",
        "        return stem, None\n",
        "    vid, t = parts\n",
        "    mm = int(t[:2]); ss = int(t[2:])\n",
        "    return vid, mm*60 + ss\n",
        "\n",
        "# === Main Processing ===\n",
        "mount_drive()\n",
        "\n",
        "# Load model and processor\n",
        "print(f\"Loading model and processor ({MODEL_NAME})...\")\n",
        "processor = AutoImageProcessor.from_pretrained(MODEL_NAME)\n",
        "model = AutoModelForObjectDetection.from_pretrained(MODEL_NAME).to(\n",
        "    torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        ")\n",
        "print(\"Model ready.\\n\")\n",
        "\n",
        "# Gather images\n",
        "stills = sorted(f for f in STILLS_DIR.iterdir() if f.suffix.lower() in {'.jpg','.jpeg','.png'})\n",
        "if not stills:\n",
        "    print(f\"No stills found in {STILLS_DIR}\")\n",
        "else:\n",
        "    print(f\"Found {len(stills)} images to annotate.\\n\")\n",
        "\n",
        "    annotations = []\n",
        "    for idx, img_path in enumerate(stills, start=1):\n",
        "        print(f\"[{idx}/{len(stills)}] Processing '{img_path.name}'\")\n",
        "        try:\n",
        "            img = Image.open(img_path).convert(\"RGB\")\n",
        "        except Exception as e:\n",
        "            print(f\"  ✗ Failed to open image: {e}\")\n",
        "            continue\n",
        "\n",
        "        width, height = img.size\n",
        "        video_id, ts = parse_filename(img_path.name)\n",
        "\n",
        "        # Prepare tensor\n",
        "        inputs = processor(images=img, return_tensors=\"pt\").to(model.device)\n",
        "        with torch.no_grad():\n",
        "            outputs = model(**inputs)\n",
        "\n",
        "        # Postprocess\n",
        "        target_sizes = torch.tensor([[height, width]], device=model.device)\n",
        "        results = processor.post_process_object_detection(\n",
        "            outputs, threshold=CONF_THRESH, target_sizes=target_sizes\n",
        "        )[0]\n",
        "\n",
        "        # Extract detections\n",
        "        for j, (score, label_id, box) in enumerate(\n",
        "            zip(results[\"scores\"], results[\"labels\"], results[\"boxes\"])\n",
        "        ):\n",
        "            if j >= MAX_OBJS:\n",
        "                break\n",
        "            score_v = score.item()\n",
        "            # Box coords [xmin, ymin, xmax, ymax] in pixels\n",
        "            x_min, y_min, x_max, y_max = box.tolist()\n",
        "            # Normalized\n",
        "            x_min_norm = x_min / width\n",
        "            y_min_norm = y_min / height\n",
        "            x_max_norm = x_max / width\n",
        "            y_max_norm = y_max / height\n",
        "            # Derived\n",
        "            bb_area = int((x_max - x_min) * (y_max - y_min))\n",
        "            bb_aspect = (\n",
        "                (y_max_norm - y_min_norm) / (x_max_norm - x_min_norm)\n",
        "                if (x_max_norm > x_min_norm) else None\n",
        "            )\n",
        "\n",
        "            annotations.append({\n",
        "                'video_id': video_id,\n",
        "                'image_file_name': img_path.name,\n",
        "                'timestamp_sec': ts,\n",
        "                'image_width_px': width,\n",
        "                'image_height_px': height,\n",
        "                'frame_id': img_path.stem,\n",
        "                'object_id': f\"{img_path.stem}_obj{j+1}\",\n",
        "                'class_id': label_id.item(),\n",
        "                'object_name': model.config.id2label[label_id.item()],\n",
        "                'object_category': 'N/A',\n",
        "                'x_min_norm': round(x_min_norm, 4),\n",
        "                'y_min_norm': round(y_min_norm, 4),\n",
        "                'x_max_norm': round(x_max_norm, 4),\n",
        "                'y_max_norm': round(y_max_norm, 4),\n",
        "                'x_min': int(x_min),\n",
        "                'y_min': int(y_min),\n",
        "                'x_max': int(x_max),\n",
        "                'y_max': int(y_max),\n",
        "                'bb_area_px': bb_area,\n",
        "                'bb_aspect_ratio': round(bb_aspect, 4) if bb_aspect is not None else None,\n",
        "                'confidence': round(score_v, 4),\n",
        "                'frame_type': None,\n",
        "                'interaction_score': None,\n",
        "                'annotator_id': None,\n",
        "                'annotation_method': 'auto',\n",
        "                'annotation_version': None,\n",
        "                'review_status': None,\n",
        "                'reviewer_notes': None\n",
        "            })\n",
        "\n",
        "    # Save to CSV\n",
        "    if annotations:\n",
        "        print(\"\\nSaving annotations to CSV...\")\n",
        "        df = pd.DataFrame(annotations)\n",
        "        cols = [\n",
        "            'video_id','image_file_name','timestamp_sec','image_width_px','image_height_px',\n",
        "            'frame_id','object_id','class_id','object_name','object_category',\n",
        "            'x_min_norm','y_min_norm','x_max_norm','y_max_norm',\n",
        "            'x_min','y_min','x_max','y_max',\n",
        "            'bb_area_px','bb_aspect_ratio',\n",
        "            'confidence','frame_type','interaction_score',\n",
        "            'annotator_id','annotation_method','annotation_version','review_status','reviewer_notes'\n",
        "        ]\n",
        "        df.to_csv(OUTPUT_CSV, index=False, columns=cols)\n",
        "        print(f\"Annotations saved to {OUTPUT_CSV}\")\n",
        "    else:\n",
        "        print(\"No detections above threshold.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FEUwjlB3JpAh",
        "outputId": "c7e2a206-e332-47ee-87f2-14139638d0bf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounting Google Drive...\n",
            "Mounted at /content/drive\n",
            "Drive mounted.\n",
            "Loading model and processor (facebook/detr-resnet-50)...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Some weights of the model checkpoint at facebook/detr-resnet-50 were not used when initializing DetrForObjectDetection: ['model.backbone.conv_encoder.model.layer1.0.downsample.1.num_batches_tracked', 'model.backbone.conv_encoder.model.layer2.0.downsample.1.num_batches_tracked', 'model.backbone.conv_encoder.model.layer3.0.downsample.1.num_batches_tracked', 'model.backbone.conv_encoder.model.layer4.0.downsample.1.num_batches_tracked']\n",
            "- This IS expected if you are initializing DetrForObjectDetection from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).\n",
            "- This IS NOT expected if you are initializing DetrForObjectDetection from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model ready.\n",
            "\n",
            "Found 37 images to annotate.\n",
            "\n",
            "[1/37] Processing 'Alloys Commitment to Support and Results_0001.jpg'\n",
            "[2/37] Processing 'Alloys Commitment to Support and Results_0007.jpg'\n",
            "[3/37] Processing 'Alloys Commitment to Support and Results_0010.jpg'\n",
            "[4/37] Processing 'Choice 1 Personal Training Foundations_0001.jpg'\n",
            "[5/37] Processing 'Choice 1 Personal Training Foundations_0007.jpg'\n",
            "[6/37] Processing 'Choice 2 Small Group Classes_0004.jpg'\n",
            "[7/37] Processing 'Choice 2 Small Group Classes_0007.jpg'\n",
            "[8/37] Processing 'Customizing Your Training Experience_0004.jpg'\n",
            "[9/37] Processing 'Customizing Your Training Experience_0007.jpg'\n",
            "[10/37] Processing 'Path 1 Get Started with Fitness_0001.jpg'\n",
            "[11/37] Processing 'Path 1 Get Started with Fitness_0007.jpg'\n",
            "[12/37] Processing 'Path 2 Build Strength and Endurance_0001.jpg'\n",
            "[13/37] Processing 'Path 2 Build Strength and Endurance_0007.jpg'\n",
            "[14/37] Processing 'Path 2 Choice 1 Strength Focused Personal Training_0001.jpg'\n",
            "[15/37] Processing 'Path 2 Choice 1 Strength Focused Personal Training_0007.jpg'\n",
            "[16/37] Processing 'Path 2 Choice 1 Strength Focused Personal Training_0010.jpg'\n",
            "[17/37] Processing 'Path 2 Choice 2 Specialized Group Training Session_0004.jpg'\n",
            "[18/37] Processing 'Path 3 Choice 1 Personalized Weight Loss Coaching_0001.jpg'\n",
            "[19/37] Processing 'Path 3 Choice 1 Personalized Weight Loss Coaching_0007.jpg'\n",
            "[20/37] Processing 'Path 3 Choice 2 Metabolic Conditioning Group Classes_0001.jpg'\n",
            "[21/37] Processing 'Path 3 Choice 2 Metabolic Conditioning Group Classes_0004.jpg'\n",
            "[22/37] Processing 'Path 3 Choice 2 Metabolic Conditioning Group Classes_0007.jpg'\n",
            "[23/37] Processing 'Path 3 Focus on Weight Loss and Wellness_0004.jpg'\n",
            "[24/37] Processing 'Path 4 Choice 1 Workout Frequency and Scheduling_0001.jpg'\n",
            "[25/37] Processing 'Path 4 Choice 1 Workout Frequency and Scheduling_0007.jpg'\n",
            "[26/37] Processing 'Path 4 Choice 2 Intensity Preferences_0001.jpg'\n",
            "[27/37] Processing 'Path 4 Choice 2 Intensity Preferences_0007.jpg'\n",
            "[28/37] Processing 'Path 4 Choice 3 Specific Areas of Focus_0001.jpg'\n",
            "[29/37] Processing 'Path 4 Choice 3 Specific Areas of Focus_0007.jpg'\n",
            "[30/37] Processing 'Path 5 Choice 1 Meet Your Trainers_0001.jpg'\n",
            "[31/37] Processing 'Path 5 Choice 1 Meet Your Trainers_0007.jpg'\n",
            "[32/37] Processing 'Path 5 Choice 2 Understand Our Accountability System_0004.jpg'\n",
            "[33/37] Processing 'Path 5 Choice 2 Understand Our Accountability System_0007.jpg'\n",
            "[34/37] Processing 'Schedule a Free Consultation_0001.jpg'\n",
            "[35/37] Processing 'Schedule a Free Consultation_0007.jpg'\n",
            "[36/37] Processing 'Welcome to Alloy Personal Training_0004.jpg'\n",
            "[37/37] Processing 'Welcome to Alloy Personal Training_0010.jpg'\n",
            "\n",
            "💾 Saving annotations to CSV...\n",
            "Annotations saved to /content/drive/MyDrive/FreeFuse_Project/Extracted_Stills/draft_annotations.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 2b) Faster R-CNN"
      ],
      "metadata": {
        "id": "3QwwFhPPPG50"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from pathlib import Path\n",
        "import tensorflow as tf\n",
        "import tensorflow_hub as hub\n",
        "import pandas as pd\n",
        "from PIL import Image\n",
        "import numpy as np\n",
        "from google.colab import drive\n",
        "\n",
        "# === Configuration ===\n",
        "STILLS_DIR        = Path('/content/drive/MyDrive/FreeFuse_Project/Extracted_Stills')\n",
        "OUTPUT_CSV        = STILLS_DIR / 'draft_annotations_tfhub_faster_rcnn.csv'\n",
        "MODEL_URL         = \"https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1\"\n",
        "MAX_OBJECTS       = 8\n",
        "CONF_THRESH       = 0.4\n",
        "\n",
        "# === Helper Functions ===\n",
        "def mount_drive():\n",
        "    \"\"\"Mount Google Drive.\"\"\"\n",
        "    print(\"Mounting Google Drive...\")\n",
        "    drive.mount('/content/drive', force_remount=True)\n",
        "    print(\"Drive mounted.\")\n",
        "\n",
        "def parse_filename(filename: str):\n",
        "    \"\"\"\n",
        "    From '<video_id>_<MMSS>.jpg', return (video_id, timestamp_sec).\n",
        "    \"\"\"\n",
        "    stem = Path(filename).stem\n",
        "    parts = stem.rsplit('_', 1)\n",
        "    if len(parts) == 2 and parts[1].isdigit():\n",
        "        vid, t = parts\n",
        "        mm = int(t[:2]); ss = int(t[2:])\n",
        "        return vid, mm*60 + ss\n",
        "    return stem, None\n",
        "\n",
        "# === Main Execution ===\n",
        "mount_drive()\n",
        "\n",
        "# Load the TF-Hub model signature\n",
        "print(f\"Loading model from: {MODEL_URL}\")\n",
        "loaded      = hub.load(MODEL_URL)\n",
        "detector_fn = loaded.signatures['default']\n",
        "print(\"Model loaded.\\n\")\n",
        "\n",
        "# Gather still images\n",
        "stills = sorted(STILLS_DIR.glob('*.jpg'))\n",
        "if not stills:\n",
        "    print(f\"No images found in {STILLS_DIR}\")\n",
        "else:\n",
        "    print(f\"Found {len(stills)} images to process.\\n\")\n",
        "\n",
        "annotations = []\n",
        "for idx, img_path in enumerate(stills, start=1):\n",
        "    print(f\"[{idx}/{len(stills)}] {img_path.name}\")\n",
        "    try:\n",
        "        pil_img = Image.open(img_path).convert(\"RGB\")\n",
        "    except Exception as e:\n",
        "        print(f\"  ✗ Could not open image: {e}\")\n",
        "        continue\n",
        "\n",
        "    img_np = np.array(pil_img).astype(np.float32) / 255.0\n",
        "    h, w, _ = img_np.shape\n",
        "    batch = tf.expand_dims(tf.convert_to_tensor(img_np), 0)\n",
        "\n",
        "    # Run inference\n",
        "    results = detector_fn(images=batch)\n",
        "\n",
        "    # Extract outputs\n",
        "    scores    = results['detection_scores'].numpy().reshape(-1)\n",
        "    boxes     = results['detection_boxes'].numpy().reshape(-1, 4)\n",
        "    raw_names = results['detection_class_names'].numpy().reshape(-1)\n",
        "\n",
        "    # Decode labels\n",
        "    labels = [\n",
        "        nm.decode('utf-8') if isinstance(nm, (bytes, bytearray)) else str(nm)\n",
        "        for nm in raw_names\n",
        "    ]\n",
        "\n",
        "    video_id, ts = parse_filename(img_path.name)\n",
        "    timestamp_sec = ts or 0\n",
        "    frame_id      = img_path.stem\n",
        "\n",
        "    kept = 0\n",
        "    for j, score in enumerate(scores):\n",
        "        if kept >= MAX_OBJECTS or score < CONF_THRESH:\n",
        "            continue\n",
        "\n",
        "        ymin, xmin, ymax, xmax = boxes[j]\n",
        "        x_min_px = int(xmin * w)\n",
        "        y_min_px = int(ymin * h)\n",
        "        x_max_px = int(xmax * w)\n",
        "        y_max_px = int(ymax * h)\n",
        "\n",
        "        x_min_norm = round(xmin, 4)\n",
        "        y_min_norm = round(ymin, 4)\n",
        "        x_max_norm = round(xmax, 4)\n",
        "        y_max_norm = round(ymax, 4)\n",
        "\n",
        "        bb_area     = (x_max_px - x_min_px) * (y_max_px - y_min_px)\n",
        "        bb_aspect   = (\n",
        "            (y_max_norm - y_min_norm) / (x_max_norm - x_min_norm)\n",
        "            if x_max_norm > x_min_norm else None\n",
        "        )\n",
        "\n",
        "        annotations.append({\n",
        "            'video_id':           video_id,\n",
        "            'image_file_name':    img_path.name,\n",
        "            'timestamp_sec':      timestamp_sec,\n",
        "            'image_width_px':     w,\n",
        "            'image_height_px':    h,\n",
        "            'frame_id':           frame_id,\n",
        "            'object_id':          f\"{frame_id}_obj{j+1}\",\n",
        "            'object_name':        labels[j],\n",
        "            'object_category':    'N/A',\n",
        "            'x_min_norm':         x_min_norm,\n",
        "            'y_min_norm':         y_min_norm,\n",
        "            'x_max_norm':         x_max_norm,\n",
        "            'y_max_norm':         y_max_norm,\n",
        "            'x_min':              x_min_px,\n",
        "            'y_min':              y_min_px,\n",
        "            'x_max':              x_max_px,\n",
        "            'y_max':              y_max_px,\n",
        "            'bb_area_px':         bb_area,\n",
        "            'bb_aspect_ratio':    round(bb_aspect, 4) if bb_aspect is not None else None,\n",
        "            'confidence':         round(float(score), 4),\n",
        "            'frame_type':         None,\n",
        "            'interaction_score':  None,\n",
        "            'annotator_id':       None,\n",
        "            'annotation_method':  'auto',\n",
        "            'annotation_version': None,\n",
        "            'review_status':      None,\n",
        "            'reviewer_notes':     None\n",
        "        })\n",
        "        kept += 1\n",
        "\n",
        "# Save\n",
        "if annotations:\n",
        "    print(\"\\n💾 Saving CSV...\")\n",
        "    df = pd.DataFrame(annotations)\n",
        "    cols = [\n",
        "        'video_id','image_file_name','timestamp_sec','image_width_px','image_height_px',\n",
        "        'frame_id','object_id','object_name','object_category',\n",
        "        'x_min_norm','y_min_norm','x_max_norm','y_max_norm',\n",
        "        'x_min','y_min','x_max','y_max',\n",
        "        'bb_area_px','bb_aspect_ratio','confidence',\n",
        "        'frame_type','interaction_score','annotator_id','annotation_method',\n",
        "        'annotation_version','review_status','reviewer_notes'\n",
        "    ]\n",
        "    df.to_csv(OUTPUT_CSV, index=False, columns=cols)\n",
        "    print(f\"Annotations saved to {OUTPUT_CSV}\")\n",
        "else:\n",
        "    print(\"No detections met threshold.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JbopIqILPENY",
        "outputId": "dc29b76e-a4b6-4d5d-8e42-360f97812151"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔗 Mounting Google Drive...\n",
            "Mounted at /content/drive\n",
            "✅ Drive mounted.\n",
            "📦 Loading model from: https://tfhub.dev/google/faster_rcnn/openimages_v4/inception_resnet_v2/1\n",
            "✅ Model loaded.\n",
            "\n",
            "🖼 Found 37 images to process.\n",
            "\n",
            "[1/37] Alloys Commitment to Support and Results_0001.jpg\n",
            "[2/37] Alloys Commitment to Support and Results_0007.jpg\n",
            "[3/37] Alloys Commitment to Support and Results_0010.jpg\n",
            "[4/37] Choice 1 Personal Training Foundations_0001.jpg\n",
            "[5/37] Choice 1 Personal Training Foundations_0007.jpg\n",
            "[6/37] Choice 2 Small Group Classes_0004.jpg\n",
            "[7/37] Choice 2 Small Group Classes_0007.jpg\n",
            "[8/37] Customizing Your Training Experience_0004.jpg\n",
            "[9/37] Customizing Your Training Experience_0007.jpg\n",
            "[10/37] Path 1 Get Started with Fitness_0001.jpg\n",
            "[11/37] Path 1 Get Started with Fitness_0007.jpg\n",
            "[12/37] Path 2 Build Strength and Endurance_0001.jpg\n",
            "[13/37] Path 2 Build Strength and Endurance_0007.jpg\n",
            "[14/37] Path 2 Choice 1 Strength Focused Personal Training_0001.jpg\n",
            "[15/37] Path 2 Choice 1 Strength Focused Personal Training_0007.jpg\n",
            "[16/37] Path 2 Choice 1 Strength Focused Personal Training_0010.jpg\n",
            "[17/37] Path 2 Choice 2 Specialized Group Training Session_0004.jpg\n",
            "[18/37] Path 3 Choice 1 Personalized Weight Loss Coaching_0001.jpg\n",
            "[19/37] Path 3 Choice 1 Personalized Weight Loss Coaching_0007.jpg\n",
            "[20/37] Path 3 Choice 2 Metabolic Conditioning Group Classes_0001.jpg\n",
            "[21/37] Path 3 Choice 2 Metabolic Conditioning Group Classes_0004.jpg\n",
            "[22/37] Path 3 Choice 2 Metabolic Conditioning Group Classes_0007.jpg\n",
            "[23/37] Path 3 Focus on Weight Loss and Wellness_0004.jpg\n",
            "[24/37] Path 4 Choice 1 Workout Frequency and Scheduling_0001.jpg\n",
            "[25/37] Path 4 Choice 1 Workout Frequency and Scheduling_0007.jpg\n",
            "[26/37] Path 4 Choice 2 Intensity Preferences_0001.jpg\n",
            "[27/37] Path 4 Choice 2 Intensity Preferences_0007.jpg\n",
            "[28/37] Path 4 Choice 3 Specific Areas of Focus_0001.jpg\n",
            "[29/37] Path 4 Choice 3 Specific Areas of Focus_0007.jpg\n",
            "[30/37] Path 5 Choice 1 Meet Your Trainers_0001.jpg\n",
            "[31/37] Path 5 Choice 1 Meet Your Trainers_0007.jpg\n",
            "[32/37] Path 5 Choice 2 Understand Our Accountability System_0004.jpg\n",
            "[33/37] Path 5 Choice 2 Understand Our Accountability System_0007.jpg\n",
            "[34/37] Schedule a Free Consultation_0001.jpg\n",
            "[35/37] Schedule a Free Consultation_0007.jpg\n",
            "[36/37] Welcome to Alloy Personal Training_0004.jpg\n",
            "[37/37] Welcome to Alloy Personal Training_0010.jpg\n",
            "\n",
            "💾 Saving CSV...\n",
            "✅ Annotations saved to /content/drive/MyDrive/FreeFuse_Project/Extracted_Stills/draft_annotations_tfhub_faster_rcnn.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from pathlib import Path\n",
        "import pandas as pd\n",
        "import requests\n",
        "from google.colab import drive\n",
        "\n",
        "# === Configuration ===\n",
        "STILLS_DIR      = Path('/content/drive/MyDrive/FreeFuse_Project/Extracted_Stills')\n",
        "INPUT_CSV       = STILLS_DIR / 'draft_annotations_tfhub_faster_rcnn.csv'\n",
        "OUTPUT_CSV      = STILLS_DIR / 'annotations_ssd_translated.csv'\n",
        "CLASS_MAP_URL   = 'https://storage.googleapis.com/openimages/v6/oidv6-class-descriptions.csv'\n",
        "\n",
        "# === Helper Functions ===\n",
        "def mount_drive():\n",
        "    \"\"\"Mount Google Drive.\"\"\"\n",
        "    print(\"Mounting Google Drive...\")\n",
        "    drive.mount('/content/drive', force_remount=True)\n",
        "    print(\"Drive mounted.\\n\")\n",
        "\n",
        "def load_annotations(csv_path: Path) -> pd.DataFrame:\n",
        "    \"\"\"Load annotations CSV and ensure it contains an 'object_name' column.\"\"\"\n",
        "    if not csv_path.exists():\n",
        "        raise FileNotFoundError(f\"Annotation file not found: {csv_path}\")\n",
        "    df = pd.read_csv(csv_path)\n",
        "    if 'object_name' not in df.columns:\n",
        "        raise ValueError(\"CSV is missing the required 'object_name' column.\")\n",
        "    return df\n",
        "\n",
        "def download_class_map(url: str) -> dict:\n",
        "    \"\"\"\n",
        "    Download the OpenImages class-descriptions file and return\n",
        "    a mapping from LabelName (MID) to DisplayName.\n",
        "    \"\"\"\n",
        "    try:\n",
        "        class_df = pd.read_csv(url, header=None, names=['LabelName','DisplayName'])\n",
        "        return dict(zip(class_df.LabelName, class_df.DisplayName))\n",
        "    except Exception as e:\n",
        "        raise RuntimeError(f\"Failed to download or parse class map: {e}\")\n",
        "\n",
        "def translate_object_names(df: pd.DataFrame, id_map: dict) -> pd.DataFrame:\n",
        "    \"\"\"\n",
        "    Replace the 'object_name' MIDs in df with human-readable labels.\n",
        "    Any missing MIDs become 'Unknown'.\n",
        "    \"\"\"\n",
        "    out = df.copy()\n",
        "    out['object_name'] = out['object_name'].map(id_map).fillna('Unknown')\n",
        "    return out\n",
        "\n",
        "# === Main Execution ===\n",
        "mount_drive()\n",
        "\n",
        "try:\n",
        "    print(f\"Loading annotations from {INPUT_CSV}\")\n",
        "    annotations_df = load_annotations(INPUT_CSV)\n",
        "\n",
        "    print(\"Downloading OpenImages class descriptions...\")\n",
        "    id_to_name = download_class_map(CLASS_MAP_URL)\n",
        "    print(\"Class map loaded.\\n\")\n",
        "\n",
        "    print(\"Translating object_name MIDs to display names...\")\n",
        "    translated_df = translate_object_names(annotations_df, id_to_name)\n",
        "\n",
        "    print(f\"Saving translated annotations to {OUTPUT_CSV}\")\n",
        "    translated_df.to_csv(OUTPUT_CSV, index=False)\n",
        "    print(\"Translation complete.\\n\")\n",
        "\n",
        "    print(\"--- Sample Translated Rows ---\")\n",
        "    print(translated_df.head())\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"ERROR: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bYrbpkbNQ7-1",
        "outputId": "e9b59ef9-5259-4ac4-ac19-e64e9491d56e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔗 Mounting Google Drive...\n",
            "Mounted at /content/drive\n",
            "✅ Drive mounted.\n",
            "\n",
            "Loading annotations from /content/drive/MyDrive/FreeFuse_Project/Extracted_Stills/draft_annotations_tfhub_faster_rcnn.csv\n",
            "Downloading OpenImages class descriptions...\n",
            "Class map loaded.\n",
            "\n",
            "Translating object_name MIDs to display names...\n",
            "Saving translated annotations to /content/drive/MyDrive/FreeFuse_Project/Extracted_Stills/annotations_ssd_translated.csv\n",
            "✅ Translation complete.\n",
            "\n",
            "--- Sample Translated Rows ---\n",
            "                                   video_id  \\\n",
            "0  Alloys Commitment to Support and Results   \n",
            "1  Alloys Commitment to Support and Results   \n",
            "2  Alloys Commitment to Support and Results   \n",
            "3  Alloys Commitment to Support and Results   \n",
            "4  Alloys Commitment to Support and Results   \n",
            "\n",
            "                                     image_file_name  timestamp_sec  \\\n",
            "0  Alloys Commitment to Support and Results_0001.jpg              1   \n",
            "1  Alloys Commitment to Support and Results_0001.jpg              1   \n",
            "2  Alloys Commitment to Support and Results_0001.jpg              1   \n",
            "3  Alloys Commitment to Support and Results_0001.jpg              1   \n",
            "4  Alloys Commitment to Support and Results_0007.jpg              7   \n",
            "\n",
            "   image_width_px  image_height_px  \\\n",
            "0            1920             1080   \n",
            "1            1920             1080   \n",
            "2            1920             1080   \n",
            "3            1920             1080   \n",
            "4            1920             1080   \n",
            "\n",
            "                                        frame_id  \\\n",
            "0  Alloys Commitment to Support and Results_0001   \n",
            "1  Alloys Commitment to Support and Results_0001   \n",
            "2  Alloys Commitment to Support and Results_0001   \n",
            "3  Alloys Commitment to Support and Results_0001   \n",
            "4  Alloys Commitment to Support and Results_0007   \n",
            "\n",
            "                                           object_id object_name  \\\n",
            "0  Alloys Commitment to Support and Results_0001_...       Watch   \n",
            "1  Alloys Commitment to Support and Results_0001_...       Woman   \n",
            "2  Alloys Commitment to Support and Results_0001_...    Clothing   \n",
            "3  Alloys Commitment to Support and Results_0001_...  Human face   \n",
            "4  Alloys Commitment to Support and Results_0007_...       Woman   \n",
            "\n",
            "   object_category  x_min_norm  ...  bb_area_px  bb_aspect_ratio  confidence  \\\n",
            "0              NaN      0.6007  ...       55488           2.3697      0.8382   \n",
            "1              NaN      0.4589  ...      445464           4.6148      0.6527   \n",
            "2              NaN      0.4766  ...      278250           4.0257      0.6384   \n",
            "3              NaN      0.6168  ...       21312           3.0900      0.6035   \n",
            "4              NaN      0.4974  ...      527040           3.9324      0.7661   \n",
            "\n",
            "   frame_type  interaction_score  annotator_id  annotation_method  \\\n",
            "0         NaN                NaN           NaN               auto   \n",
            "1         NaN                NaN           NaN               auto   \n",
            "2         NaN                NaN           NaN               auto   \n",
            "3         NaN                NaN           NaN               auto   \n",
            "4         NaN                NaN           NaN               auto   \n",
            "\n",
            "   annotation_version  review_status  reviewer_notes  \n",
            "0                 NaN            NaN             NaN  \n",
            "1                 NaN            NaN             NaN  \n",
            "2                 NaN            NaN             NaN  \n",
            "3                 NaN            NaN             NaN  \n",
            "4                 NaN            NaN             NaN  \n",
            "\n",
            "[5 rows x 27 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get Object Annotations from RoboFlow:\n",
        "'''\n",
        "IMPORTANT:\n",
        "This project assumes that the API Key is stored in\n",
        "Colab Secrets under the name 'ROBOFLOW_API_KEY'. To\n",
        "configure, click the key icon in Colab, and add the\n",
        "name and value.\n",
        "'''\n",
        "\n",
        "# Install RoboFlow SDK\n",
        "!pip install inference-sdk -q\n",
        "\n",
        "# Imports & Configurable Parameters\n",
        "import os\n",
        "import pandas as pd\n",
        "from pathlib import Path\n",
        "from inference_sdk import InferenceHTTPClient\n",
        "from google.colab import drive, userdata\n",
        "\n",
        "# === Configurable Parameters ===\n",
        "stills_folder_path   = '/content/drive/MyDrive/FreeFuse_Project/Extracted_Stills'\n",
        "output_csv_path      = '/content/drive/MyDrive/FreeFuse_Project/Extracted_Stills/draft_annotations.csv'\n",
        "max_objects_per_image = 10\n",
        "confidence_threshold  = 0.4\n",
        "\n",
        "# RoboFlow workflow settings\n",
        "workflow_id          = 'freefusetestwf'       # <-- set your workflow ID here\n",
        "workspace_name       = 'student-workspace'    # <-- set your workspace name here\n",
        "# ===============================\n",
        "\n",
        "# Mount Google Drive\n",
        "print(\"Connecting to Google Drive...\")\n",
        "drive.mount('/content/drive', force_remount=True)\n",
        "print(\"Google Drive connected.\")\n",
        "\n",
        "# Retrieve API key\n",
        "try:\n",
        "    ROBOFLOW_API_KEY = userdata.get('ROBOFLOW_API_KEY')\n",
        "except userdata.SecretNotFoundError:\n",
        "    print(\"ERROR: Secret 'ROBOFLOW_API_KEY' not found.\")\n",
        "    ROBOFLOW_API_KEY = None\n",
        "\n",
        "# Initialize RoboFlow client\n",
        "if not ROBOFLOW_API_KEY:\n",
        "    raise ValueError(\"RoboFlow API key is missing. Aborting.\")\n",
        "client = InferenceHTTPClient(\n",
        "    api_url=\"https://serverless.roboflow.com\",\n",
        "    api_key=ROBOFLOW_API_KEY\n",
        ")\n",
        "print(\"Roboflow client initialized.\")\n",
        "\n",
        "# Prepare to collect annotations\n",
        "all_annotations = []\n",
        "image_files = []\n",
        "try:\n",
        "    image_files = [\n",
        "        f for f in os.listdir(stills_folder_path)\n",
        "        if f.lower().endswith(('.jpg','.jpeg','.png'))\n",
        "    ]\n",
        "except FileNotFoundError:\n",
        "    raise FileNotFoundError(f\"Input folder not found: {stills_folder_path}\")\n",
        "\n",
        "if not image_files:\n",
        "    print(\"No images found. Exiting.\")\n",
        "else:\n",
        "    print(f\"Processing {len(image_files)} images...\")\n",
        "\n",
        "    for idx, img_name in enumerate(image_files, start=1):\n",
        "        print(f\"[{idx}/{len(image_files)}] {img_name}\")\n",
        "        img_path = os.path.join(stills_folder_path, img_name)\n",
        "        frame_id = os.path.splitext(img_name)[0]\n",
        "\n",
        "        try:\n",
        "            # Call the workflow\n",
        "            result = client.run_workflow(\n",
        "                workspace_name=workspace_name,\n",
        "                workflow_id=workflow_id,\n",
        "                images={\"image\": img_path},\n",
        "                use_cache=True\n",
        "            )\n",
        "        except Exception as e:\n",
        "            print(f\"  Error invoking RoboFlow on {img_name}: {e}\")\n",
        "            continue\n",
        "\n",
        "        # Parse response\n",
        "        if not (isinstance(result, list) and result and 'output' in result[0]):\n",
        "            print(f\"  Unexpected response for {img_name}\")\n",
        "            continue\n",
        "        preds = result[0]['output'].get('predictions', {}).get('predictions', [])\n",
        "\n",
        "        # Sort and filter\n",
        "        preds.sort(key=lambda p: p.get('confidence', 0), reverse=True)\n",
        "        count = 0\n",
        "\n",
        "        # Load dimensions once\n",
        "        from PIL import Image\n",
        "        im = Image.open(img_path)\n",
        "        w, h = im.size\n",
        "\n",
        "        for p in preds:\n",
        "            if count >= max_objects_per_image:\n",
        "                break\n",
        "            conf = p.get('confidence', 0)\n",
        "            if conf < confidence_threshold:\n",
        "                continue\n",
        "\n",
        "            # Convert center/wh to pixel bounds\n",
        "            xc, yc, bw, bh = p.get('x',0), p.get('y',0), p.get('width',0), p.get('height',0)\n",
        "            x_min = int(xc - bw/2)\n",
        "            y_min = int(yc - bh/2)\n",
        "            x_max = int(xc + bw/2)\n",
        "            y_max = int(yc + bh/2)\n",
        "            # clamp to image\n",
        "            x_min, y_min = max(0,x_min), max(0,y_min)\n",
        "            x_max, y_max = min(w, x_max), min(h, y_max)\n",
        "            area = (x_max - x_min) * (y_max - y_min)\n",
        "\n",
        "            # Build an object_id\n",
        "            object_id = f\"{frame_id}_obj{count+1}\"\n",
        "\n",
        "            all_annotations.append({\n",
        "                'frame_id': frame_id,\n",
        "                'image_file_name': img_name,\n",
        "                'timestamp_sec': int(float(frame_id.split('_')[-1])),  # adjust if your naming differs\n",
        "                'image_width_px': w,\n",
        "                'image_height_px': h,\n",
        "                'object_id': object_id,\n",
        "                'object_name': p.get('class','unknown').lower().replace(' ','_'),\n",
        "                'object_category': 'N/A',\n",
        "                'x_min': x_min,\n",
        "                'y_min': y_min,\n",
        "                'x_max': x_max,\n",
        "                'y_max': y_max,\n",
        "                'bb_area_px': area,\n",
        "                'confidence': round(conf,4),\n",
        "                'review_status': 'pending',\n",
        "                'reviewer_notes': ''\n",
        "            })\n",
        "            count += 1\n",
        "\n",
        "# Export to CSV\n",
        "if all_annotations:\n",
        "    df = pd.DataFrame(all_annotations, columns=[\n",
        "        'frame_id','image_file_name','timestamp_sec',\n",
        "        'image_width_px','image_height_px','object_id',\n",
        "        'object_name','object_category','x_min','y_min','x_max','y_max',\n",
        "        'bb_area_px','confidence','review_status','reviewer_notes'\n",
        "    ])\n",
        "    df.to_csv(output_csv_path, index=False)\n",
        "    print(f\"Saved {len(df)} rows to {output_csv_path}\")\n",
        "else:\n",
        "    print(\"No annotations collected.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "o9R7_AGxCOx4",
        "outputId": "094fc0db-2f17-4e33-d73a-4013736d4181"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/43.4 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m43.4/43.4 kB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.3/1.3 MB\u001b[0m \u001b[31m57.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.5/62.5 MB\u001b[0m \u001b[31m16.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m181.5/181.5 kB\u001b[0m \u001b[31m14.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m50.9/50.9 kB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hConnecting to Google Drive...\n",
            "Mounted at /content/drive\n",
            "Google Drive connected.\n",
            "Roboflow client initialized.\n",
            "Processing 4 images...\n",
            "[1/4] Path 3 Focus on Weight Loss and Wellness_0001.jpg\n",
            "[2/4] Path 3 Focus on Weight Loss and Wellness_0005.jpg\n",
            "[3/4] Path 2 Choice 2 Specialized Group Training Session_0001.jpg\n",
            "[4/4] Path 2 Choice 2 Specialized Group Training Session_0005.jpg\n",
            "Saved 11 rows to /content/drive/MyDrive/FreeFuse_Project/Extracted_Stills/draft_annotations.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 3) Label Stills"
      ],
      "metadata": {
        "id": "SG4UZ4sDQ8hJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from pathlib import Path\n",
        "import pandas as pd\n",
        "import cv2\n",
        "from google.colab import drive\n",
        "\n",
        "# === Configuration ===\n",
        "STILLS_DIR = Path('/content/drive/MyDrive/FreeFuse_Project/Extracted_Stills/YOLOv10')\n",
        "ANNOTATIONS_CSV = STILLS_DIR / 'draft_annotations.csv'\n",
        "OUTPUT_DIR = Path('/content/drive/MyDrive/FreeFuse_Project/Labeled_Stills')\n",
        "\n",
        "BOX_COLOR = (0, 255, 0)       # BGR\n",
        "TEXT_COLOR = (255, 255, 255)  # BGR\n",
        "BOX_THICKNESS = 2\n",
        "FONT = cv2.FONT_HERSHEY_SIMPLEX\n",
        "FONT_SCALE = 0.6\n",
        "LINE_TYPE = cv2.LINE_AA\n",
        "\n",
        "# === Helper Functions ===\n",
        "def mount_drive():\n",
        "    \"\"\"Mount Google Drive.\"\"\"\n",
        "    print(\"Mounting Google Drive...\")\n",
        "    drive.mount('/content/drive', force_remount=True)\n",
        "    print(\"Drive mounted.\")\n",
        "\n",
        "def load_annotations(csv_path: Path) -> pd.DataFrame:\n",
        "    \"\"\"Load and validate annotation CSV.\"\"\"\n",
        "    if not csv_path.exists():\n",
        "        raise FileNotFoundError(f\"Annotation file not found: {csv_path}\")\n",
        "    df = pd.read_csv(csv_path)\n",
        "    required_cols = {\n",
        "        'frame_id','image_file_name','timestamp_sec',\n",
        "        'image_width_px','image_height_px','object_id',\n",
        "        'object_name','object_category','x_min','y_min','x_max','y_max',\n",
        "        'bb_area_px','confidence','review_status'\n",
        "    }\n",
        "    missing = required_cols - set(df.columns)\n",
        "    if missing:\n",
        "        raise ValueError(f\"Missing columns in CSV: {missing}\")\n",
        "    return df\n",
        "\n",
        "def annotate_and_save(df: pd.DataFrame, stills_dir: Path, output_dir: Path):\n",
        "    \"\"\"Draw bounding boxes on images and save annotated copies.\"\"\"\n",
        "    output_dir.mkdir(parents=True, exist_ok=True)\n",
        "    grouped = df.groupby('image_file_name')\n",
        "    print(f\"Found annotations for {len(grouped)} images.\")\n",
        "    for idx, (img_name, group) in enumerate(grouped, start=1):\n",
        "        print(f\"[{idx}/{len(grouped)}] Annotating {img_name}\")\n",
        "        img_path = stills_dir / img_name\n",
        "        if not img_path.exists():\n",
        "            print(f\"  ✗ Image not found: {img_path}\")\n",
        "            continue\n",
        "        image = cv2.imread(str(img_path))\n",
        "        if image is None:\n",
        "            print(f\"  ✗ Failed to load image: {img_path}\")\n",
        "            continue\n",
        "\n",
        "        # Draw each annotation\n",
        "        for _, row in group.iterrows():\n",
        "            x_min = int(row['x_min'])\n",
        "            y_min = int(row['y_min'])\n",
        "            x_max = int(row['x_max'])\n",
        "            y_max = int(row['y_max'])\n",
        "            label = row['object_name']\n",
        "            conf = row['confidence']\n",
        "            # Draw bounding box\n",
        "            cv2.rectangle(image, (x_min, y_min), (x_max, y_max), BOX_COLOR, BOX_THICKNESS)\n",
        "            # Text background\n",
        "            text = f\"{label}: {conf:.2f}\"\n",
        "            (w, h), _ = cv2.getTextSize(text, FONT, FONT_SCALE, 1)\n",
        "            cv2.rectangle(image, (x_min, y_min - h - 4), (x_min + w, y_min), BOX_COLOR, -1)\n",
        "            # Text overlay\n",
        "            cv2.putText(image, text, (x_min, y_min - 2), FONT, FONT_SCALE, TEXT_COLOR, 1, LINE_TYPE)\n",
        "\n",
        "        # Save annotated image\n",
        "        out_name = img_path.stem + '_annotated.jpg'\n",
        "        out_path = output_dir / out_name\n",
        "        cv2.imwrite(str(out_path), image)\n",
        "    print(\"Annotation of images complete.\")\n",
        "\n",
        "# === Main Execution ===\n",
        "mount_drive()\n",
        "try:\n",
        "    annotations_df = load_annotations(ANNOTATIONS_CSV)\n",
        "    annotate_and_save(annotations_df, STILLS_DIR, OUTPUT_DIR)\n",
        "except Exception as e:\n",
        "    print(f\"ERROR: {e}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WmC0zzZaPf1p",
        "outputId": "b3552298-f0e0-4104-c7a1-df044ff66ea6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounting Google Drive...\n",
            "Mounted at /content/drive\n",
            "Drive mounted.\n",
            "ERROR: Annotation file not found: /content/drive/MyDrive/FreeFuse_Project/Extracted_Stills/YOLOv10/draft_annotations.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4) Process Outputs"
      ],
      "metadata": {
        "id": "ZMUSkZUQM0cV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Imports & Configuration\n",
        "from pathlib import Path\n",
        "from collections import Counter\n",
        "import pandas as pd\n",
        "from itertools import combinations\n",
        "from google.colab import drive\n",
        "\n",
        "# === User-configurable paths ===\n",
        "DRIVE_MOUNT_POINT      = Path(\"/content/drive\")\n",
        "PROJECT_ROOT           = DRIVE_MOUNT_POINT / \"MyDrive/FreeFuse_Project\"\n",
        "INPUT_CSV              = PROJECT_ROOT / \"final_annotations.csv\"\n",
        "OUTPUT_FREQ_CSV        = PROJECT_ROOT / \"final_object_frequency_table.csv\"\n",
        "OUTPUT_COOC_CSV        = PROJECT_ROOT / \"final_co_occurrence_matrix.csv\"\n",
        "# === End configuration ===\n",
        "\n",
        "def mount_drive():\n",
        "    print(\"Mounting Google Drive…\")\n",
        "    drive.mount(str(DRIVE_MOUNT_POINT), force_remount=True)\n",
        "    print(\"✅ Drive mounted.\")\n",
        "\n",
        "def load_annotations(path: Path) -> pd.DataFrame:\n",
        "    if not path.exists():\n",
        "        raise FileNotFoundError(f\"Annotation file not found: {path}\")\n",
        "    df = pd.read_csv(path)\n",
        "    print(f\"Loaded {len(df)} annotations from {path.name}\")\n",
        "    return df\n",
        "\n",
        "def build_frequency_table(df: pd.DataFrame, out_path: Path):\n",
        "    print(\"\\n→ Building object frequency table…\")\n",
        "    freq = df[\"object_name\"].value_counts().rename_axis(\"object_name\").reset_index(name=\"frequency\")\n",
        "    # Optional: include category breakdown\n",
        "    # cat = df.groupby(\"object_name\")[\"object_category\"].first().reset_index()\n",
        "    # freq = freq.merge(cat, on=\"object_name\", how=\"left\")\n",
        "    freq.to_csv(out_path, index=False)\n",
        "    print(f\"✅ Saved frequency table to {out_path.name}\")\n",
        "\n",
        "def build_cooccurrence_matrix(df: pd.DataFrame, out_path: Path):\n",
        "    print(\"\\n→ Building co-occurrence matrix…\")\n",
        "    # Group objects by frame and get unique names per frame\n",
        "    grouped = df.groupby(\"frame_id\")[\"object_name\"].apply(lambda lst: set(lst))\n",
        "    pair_counter = Counter()\n",
        "    for objs in grouped:\n",
        "        for a, b in combinations(sorted(objs), 2):\n",
        "            pair_counter[(a, b)] += 1\n",
        "\n",
        "    objects = sorted(df[\"object_name\"].unique())\n",
        "    # Initialize a DataFrame of zeros\n",
        "    mat = pd.DataFrame(0, index=objects, columns=objects, dtype=int)\n",
        "\n",
        "    # Fill off-diagonals\n",
        "    for (a, b), cnt in pair_counter.items():\n",
        "        mat.at[a, b] = cnt\n",
        "        mat.at[b, a] = cnt\n",
        "\n",
        "    # Diagonal = total frequency\n",
        "    freq = df[\"object_name\"].value_counts()\n",
        "    for obj, cnt in freq.items():\n",
        "        mat.at[obj, obj] = cnt\n",
        "\n",
        "    mat.to_csv(out_path)\n",
        "    print(f\"✅ Saved co-occurrence matrix to {out_path.name}\")\n",
        "\n",
        "def main():\n",
        "    mount_drive()\n",
        "    df = load_annotations(INPUT_CSV)\n",
        "\n",
        "    # Ensure output directory exists\n",
        "    PROJECT_ROOT.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "    build_frequency_table(df, OUTPUT_FREQ_CSV)\n",
        "    build_cooccurrence_matrix(df, OUTPUT_COOC_CSV)\n",
        "    print(\"\\n🎉 Draft Week 3 deliverables generated.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PVBfubdoM3DM",
        "outputId": "c294faaa-acde-48af-d8b1-dcd7e1e6670b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounting Google Drive…\n",
            "Mounted at /content/drive\n",
            "✅ Drive mounted.\n",
            "Loaded 888 annotations from final_annotations.csv\n",
            "\n",
            "→ Building object frequency table…\n",
            "✅ Saved frequency table to final_object_frequency_table.csv\n",
            "\n",
            "→ Building co-occurrence matrix…\n",
            "✅ Saved co-occurrence matrix to final_co_occurrence_matrix.csv\n",
            "\n",
            "🎉 Draft Week 3 deliverables generated.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Import libraries\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from pathlib import Path\n",
        "from google.colab import drive\n",
        "\n",
        "# ---------------- Configuration ----------------\n",
        "DRIVE_MOUNT_POINT = Path('/content/drive')\n",
        "INPUT_CSV         = DRIVE_MOUNT_POINT / 'MyDrive/FreeFuse_Project/final_annotations.csv'\n",
        "OUTPUT_PNG        = DRIVE_MOUNT_POINT / 'MyDrive/FreeFuse_Project/object_positioning_heatmap.png'\n",
        "# ------------------------------------------------\n",
        "\n",
        "# Step 2: Mount Google Drive\n",
        "print(\"Mounting Google Drive...\")\n",
        "drive.mount(str(DRIVE_MOUNT_POINT), force_remount=True)\n",
        "print(\"✅ Google Drive mounted.\")\n",
        "\n",
        "# Step 3: Load annotations\n",
        "if not INPUT_CSV.exists():\n",
        "    raise FileNotFoundError(f\"Could not find annotations file at {INPUT_CSV}\")\n",
        "df = pd.read_csv(INPUT_CSV)\n",
        "print(f\"Loaded {len(df)} annotation rows from {INPUT_CSV.name}.\")\n",
        "\n",
        "# Step 4: Compute normalized center coordinates\n",
        "df['center_x'] = (df['x_min'] + df['x_max']) / 2\n",
        "df['center_y'] = (df['y_min'] + df['y_max']) / 2\n",
        "df['norm_x']  = df['center_x'] / df['image_width_px']\n",
        "df['norm_y']  = df['center_y'] / df['image_height_px']\n",
        "\n",
        "# Step 5: Plot heatmap with matplotlib\n",
        "plt.figure(figsize=(8, 6))\n",
        "\n",
        "# 2D histogram: bins control resolution\n",
        "hb = plt.hist2d(\n",
        "    df['norm_x'],\n",
        "    df['norm_y'],\n",
        "    bins=100,\n",
        "    range=[[0,1],[0,1]],\n",
        "    cmap='viridis'\n",
        ")\n",
        "\n",
        "plt.colorbar(hb[3], label='Density')\n",
        "plt.xlabel('Normalized X position')\n",
        "plt.ylabel('Normalized Y position')\n",
        "plt.title('Heatmap of Object Center Points')\n",
        "\n",
        "# Invert y-axis so origin is top-left\n",
        "plt.gca().invert_yaxis()\n",
        "\n",
        "# Step 6: Save and display\n",
        "plt.tight_layout()\n",
        "plt.savefig(OUTPUT_PNG, dpi=300)\n",
        "print(f\"✅ Heatmap saved to {OUTPUT_PNG}\")\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "Osq173jTiMDF",
        "outputId": "dcc9cf81-d903-42ec-a679-809970e288e8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 697
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounting Google Drive...\n",
            "Mounted at /content/drive\n",
            "✅ Google Drive mounted.\n",
            "Loaded 888 annotation rows from final_annotations.csv.\n",
            "✅ Heatmap saved to /content/drive/MyDrive/FreeFuse_Project/object_positioning_heatmap.png\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Install libs\n",
        "!pip install insightface onnxruntime-gpu -q\n",
        "\n",
        "# Import libs\n",
        "import os\n",
        "from pathlib import Path\n",
        "import cv2\n",
        "import numpy as np\n",
        "from insightface.app import FaceAnalysis\n",
        "\n",
        "# --- User Params ---\n",
        "\n",
        "INPUT_FOLDER        = \"/content/drive/MyDrive/FreeFuse_Project/Videos/Input\"\n",
        "OUTPUT_FOLDER       = \"/content/drive/MyDrive/FreeFuse_Project/Videos/Blurred\"\n",
        "BLUR_INTENSITY      = 51        # must be odd\n",
        "FACE_CONF_THRESHOLD = 0.3       # detection score threshold (0–1)\n",
        "\n",
        "# --- End Parameters ---\n",
        "\n",
        "# Initialize face detector\n",
        "print(\"Loading RetinaFace via FaceAnalysis…\")\n",
        "fa = FaceAnalysis(allowed_modules=[\"detection\"], providers=[\"CPUExecutionProvider\"])\n",
        "fa.prepare(ctx_id=0, det_size=(640, 640))\n",
        "\n",
        "def blur_roi(frame, x1, y1, x2, y2, ksize):\"\n",
        "    roi = frame[y1:y2, x1:x2]\n",
        "    if roi.size:\n",
        "        frame[y1:y2, x1:x2] = cv2.GaussianBlur(roi, (ksize, ksize), 0)\n",
        "\n",
        "# Iterate over each video in the input folder\n",
        "for vid_path in Path(INPUT_FOLDER).glob(\"*.*\"):\n",
        "    if vid_path.suffix.lower() not in [\".mp4\", \".mov\", \".avi\", \".mkv\"]:\n",
        "        continue\n",
        "\n",
        "    cap = cv2.VideoCapture(str(vid_path))\n",
        "    if not cap.isOpened():\n",
        "        print(f\"Couldn’t open {vid_path.name}, skipping.\")\n",
        "        continue\n",
        "\n",
        "    w = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))\n",
        "    h = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))\n",
        "    fps = cap.get(cv2.CAP_PROP_FPS)\n",
        "    total = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))\n",
        "\n",
        "    out_path = Path(OUTPUT_FOLDER) / f\"{vid_path.stem}_blurred{vid_path.suffix}\"\n",
        "    fourcc = cv2.VideoWriter_fourcc(*\"mp4v\")\n",
        "    writer = cv2.VideoWriter(str(out_path), fourcc, fps, (w, h))\n",
        "\n",
        "    print(f\"\\nProcessing {vid_path.name} → {out_path.name}\")\n",
        "    frame_idx = 0\n",
        "\n",
        "    while True:\n",
        "        ret, frame = cap.read()\n",
        "        if not ret:\n",
        "            break\n",
        "\n",
        "        # detect faces\n",
        "        faces = fa.get(frame)\n",
        "        for face in faces:\n",
        "            score = face.det_score\n",
        "            if score < FACE_CONF_THRESHOLD:\n",
        "                continue\n",
        "            x1, y1, x2, y2 = map(int, face.bbox)\n",
        "            blur_roi(frame, x1, y1, x2, y2, BLUR_INTENSITY)\n",
        "\n",
        "        writer.write(frame)\n",
        "        frame_idx += 1\n",
        "        if frame_idx % 100 == 0:\n",
        "            print(f\"   processed {frame_idx}/{total} frames…\")\n",
        "\n",
        "    cap.release()\n",
        "    writer.release()\n",
        "    print(f\"Finished {out_path.name}\")\n",
        "\n",
        "print(\"\\nAll videos processed!\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pIdbccQRfSgg",
        "outputId": "eb06de57-2321-4b5a-ca19-cc5b1059088e"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading RetinaFace via FaceAnalysis…\n",
            "download_path: /root/.insightface/models/buffalo_l\n",
            "Downloading /root/.insightface/models/buffalo_l.zip from https://github.com/deepinsight/insightface/releases/download/v0.7/buffalo_l.zip...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 281857/281857 [00:03<00:00, 85065.76KB/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Applied providers: ['CPUExecutionProvider'], with options: {'CPUExecutionProvider': {}}\n",
            "model ignore: /root/.insightface/models/buffalo_l/1k3d68.onnx landmark_3d_68\n",
            "Applied providers: ['CPUExecutionProvider'], with options: {'CPUExecutionProvider': {}}\n",
            "model ignore: /root/.insightface/models/buffalo_l/2d106det.onnx landmark_2d_106\n",
            "Applied providers: ['CPUExecutionProvider'], with options: {'CPUExecutionProvider': {}}\n",
            "find model: /root/.insightface/models/buffalo_l/det_10g.onnx detection [1, 3, '?', '?'] 127.5 128.0\n",
            "Applied providers: ['CPUExecutionProvider'], with options: {'CPUExecutionProvider': {}}\n",
            "model ignore: /root/.insightface/models/buffalo_l/genderage.onnx genderage\n",
            "Applied providers: ['CPUExecutionProvider'], with options: {'CPUExecutionProvider': {}}\n",
            "model ignore: /root/.insightface/models/buffalo_l/w600k_r50.onnx recognition\n",
            "set det-size: (640, 640)\n",
            "\n",
            "▶ Processing 3249672-uhd_3840_2160_25fps.mp4 → 3249672-uhd_3840_2160_25fps_blurred.mp4\n",
            "   processed 100/204 frames…\n",
            "   processed 200/204 frames…\n",
            "✅ Finished 3249672-uhd_3840_2160_25fps_blurred.mp4\n",
            "\n",
            "🏁 All videos anonymized!\n"
          ]
        }
      ]
    }
  ]
}